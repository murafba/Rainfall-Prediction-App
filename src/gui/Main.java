/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import javax.swing.JOptionPane;
import fisTsukamoto.FISTsukamoto;
import geneticAlgorithm.GeneticAlgorithm;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author muraf
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        mainContent = new javax.swing.JTabbedPane();
        homeTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        datasetTable = new javax.swing.JTable();
        homeTitle = new javax.swing.JLabel();
        datasetPredictButton = new javax.swing.JButton();
        fisLabel = new javax.swing.JLabel();
        fisTsukamotoMAPE = new javax.swing.JTextField();
        mapeLabel = new javax.swing.JLabel();
        fisGALabel = new javax.swing.JLabel();
        colon1 = new javax.swing.JLabel();
        colon2 = new javax.swing.JLabel();
        fisGAMAPE = new javax.swing.JTextField();
        popField = new javax.swing.JTextField();
        mrField = new javax.swing.JTextField();
        geneField = new javax.swing.JTextField();
        crLabel = new javax.swing.JLabel();
        popLabel = new javax.swing.JLabel();
        mrLabel = new javax.swing.JLabel();
        geneLabel = new javax.swing.JLabel();
        crField = new javax.swing.JTextField();
        mapeLabel1 = new javax.swing.JLabel();
        mapeLabel2 = new javax.swing.JLabel();
        popLabel1 = new javax.swing.JLabel();
        executionTimeFieldFISGA = new javax.swing.JTextField();
        pleaseWaitLabel = new javax.swing.JLabel();
        manualForecastingTab = new javax.swing.JPanel();
        manualForecastingTitle = new javax.swing.JLabel();
        variableTitle = new javax.swing.JLabel();
        variableTitleDescription = new javax.swing.JLabel();
        airPressureField = new javax.swing.JTextField();
        humidityField = new javax.swing.JTextField();
        windVelocityField = new javax.swing.JTextField();
        manualTitleDescription = new javax.swing.JLabel();
        airPressureLabel = new javax.swing.JLabel();
        temperatureLabel = new javax.swing.JLabel();
        humidityLabel = new javax.swing.JLabel();
        windLabel = new javax.swing.JLabel();
        temperatureField = new javax.swing.JTextField();
        manualPredictButton = new javax.swing.JButton();
        rainfallPredictionTitle = new javax.swing.JLabel();
        colon = new javax.swing.JLabel();
        rainfallPredictionField = new javax.swing.JTextField();
        rainfallPredictionTitle1 = new javax.swing.JLabel();
        colon3 = new javax.swing.JLabel();
        executionTimeField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        manualTitleDescription1 = new javax.swing.JLabel();
        footerLabel = new javax.swing.JLabel();
        headerLabel = new javax.swing.JLabel();
        bmkgLogo = new javax.swing.JLabel();
        unsriLogo = new javax.swing.JLabel();
        taglineLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        container.setBackground(new java.awt.Color(66, 72, 116));
        container.setPreferredSize(new java.awt.Dimension(1280, 720));

        mainContent.setBackground(new java.awt.Color(255, 255, 255));
        mainContent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mainContent.setPreferredSize(new java.awt.Dimension(1280, 500));

        homeTab.setBackground(new java.awt.Color(217, 228, 221));
        homeTab.setPreferredSize(new java.awt.Dimension(1280, 500));

        datasetTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        datasetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Jan-18", "27.10", "86.00", "1008.40", "4.00", "326.00", null, null, null, null},
                {"2", "Feb-18", "26.50", "89.00", "1010.80", "4.00", "311.00", null, null, null, null},
                {"3", "Mar-18", "26.80", "88.00", "1009.70", "3.00", "317.00", null, null, null, null},
                {"4", "Apr-18", "27.60", "87.00", "1009.20", "3.00", "302.00", null, null, null, null},
                {"5", "May-18", "27.60", "87.00", "1009.90", "3.00", "262.00", null, null, null, null},
                {"6", "Jun-18", "27.80", "87.00", "1010.20", "4.00", "113.00", null, null, null, null},
                {"7", "Jul-18", "27.70", "86.00", "1010.60", "4.00", "68.00", null, null, null, null},
                {"8", "Aug-18", "27.90", "85.00", "1010.60", "4.00", "52.00", null, null, null, null},
                {"9", "Sep-18", "27.60", "85.00", "1011.50", "4.00", "131.00", null, null, null, null},
                {"10", "Oct-18", "28.10", "88.00", "1011.00", "4.00", "138.00", null, null, null, null},
                {"11", "Nov-18", "27.50", "91.00", "1010.60", "3.00", "244.00", null, null, null, null},
                {"12", "Dec-18", "27.40", "91.00", "1010.20", "3.00", "231.00", null, null, null, null},
                {"13", "Jan-19", "23.20", "71.00", "1010.81", "4.40", "176.00", null, null, null, null},
                {"14", "Feb-19", "23.20", "60.00", "1011.64", "3.41", "307.40", null, null, null, null},
                {"15", "Mar-19", "22.10", "66.00", "1010.58", "3.81", "251.00", null, null, null, null},
                {"16", "Apr-19", "22.80", "68.00", "1009.90", "3.14", "349.50", null, null, null, null},
                {"17", "May-19", "24.20", "65.00", "1010.09", "3.51", "166.90", null, null, null, null},
                {"18", "Jun-19", "23.00", "63.00", "1009.83", "3.56", "143.00", null, null, null, null},
                {"19", "Jul-19", "23.00", "55.00", "1010.85", "4.02", "96.00", null, null, null, null},
                {"20", "Aug-19", "22.40", "49.00", "1011.25", "4.85", "40.00", null, null, null, null},
                {"21", "Sep-19", "22.00", "44.00", "1012.02", "4.89", "64.90", null, null, null, null},
                {"22", "Oct-19", "22.80", "45.00", "1010.52", "4.50", "75.90", null, null, null, null},
                {"23", "Nov-19", "23.60", "45.00", "1010.39", "3.20", "153.00", null, null, null, null},
                {"24", "Dec-19", "22.40", "60.00", "1010.29", "3.90", "242.20", null, null, null, null},
                {"25", "Jan-20", "23.00", "57.00", "1010.43", "4.02", "286.00", null, null, null, null},
                {"26", "Feb-20", "23.00", "62.00", "1010.90", "4.30", "298.50", null, null, null, null},
                {"27", "Mar-20", "22.40", "59.00", "1010.10", "3.62", "367.90", null, null, null, null},
                {"28", "Apr-20", "22.80", "60.00", "1010.30", "3.10", "396.50", null, null, null, null},
                {"29", "May-20", "22.80", "73.00", "1009.20", "3.33", "264.70", null, null, null, null},
                {"30", "Jun-20", "22.00", "59.00", "1009.70", "3.50", "188.00", null, null, null, null},
                {"31", "Jul-20", "23.20", "64.00", "1009.10", "3.56", "126.00", null, null, null, null},
                {"32", "Aug-20", "23.00", "51.00", "1009.70", "4.30", "48.60", null, null, null, null},
                {"33", "Sep-20", "22.60", "54.00", "1009.90", "3.90", "152.00", null, null, null, null},
                {"34", "Oct-20", "21.60", "55.00", "1009.50", "3.26", "251.10", null, null, null, null},
                {"35", "Nov-20", "22.80", "55.00", "1009.90", "3.00", "333.60", null, null, null, null},
                {"36", "Dec-20", "22.00", "58.00", "1009.10", "3.44", "228.00", null, null, null, null},
                {"37", "Jan-21", "27.70", "82.10", "1008.30", "3.90", "235.70", null, null, null, null},
                {"38", "Feb-21", "28.20", "80.90", "1008.90", "4.10", "181.40", null, null, null, null},
                {"39", "Mar-21", "28.80", "78.50", "1008.30", "2.80", "251.90", null, null, null, null},
                {"40", "Apr-21", "29.20", "77.30", "1008.90", "2.30", "127.60", null, null, null, null},
                {"41", "May-21", "29.80", "77.70", "1007.70", "2.40", "144.80", null, null, null, null},
                {"42", "Jun-21", "29.80", "74.40", "1009.00", "2.80", "60.00", null, null, null, null},
                {"43", "Jul-21", "29.50", "73.40", "1008.70", "3.30", "124.70", null, null, null, null},
                {"44", "Aug-21", "28.80", "77.40", "1009.30", "3.10", "183.00", null, null, null, null},
                {"45", "Sep-21", "29.20", "78.90", "1008.70", "3.00", "229.00", null, null, null, null},
                {"46", "Oct-21", "30.10", "78.30", "1008.40", "2.80", "118.10", null, null, null, null},
                {"47", "Nov-21", "28.90", "80.50", "1007.40", "2.00", "421.40", null, null, null, null},
                {"48", "Dec-21", "28.80", "83.30", "1009.10", "3.00", "285.50", null, null, null, null},
                {"49", "Jan-22", "27.30", "87.00", "1010.40", "2.00", "241.00", null, null, null, null},
                {"50", "Feb-22", "27.50", "86.00", "1009.10", "2.00", "155.00", null, null, null, null},
                {"51", "Mar-22", "28.10", "86.00", "1008.80", "2.00", "192.00", null, null, null, null},
                {"52", "Apr-22", "28.40", "87.00", "1009.00", "3.00", "589.00", null, null, null, null},
                {"53", "May-22", "28.50", "85.00", "1008.70", "4.00", "117.00", null, null, null, null},
                {"54", "Jun-22", "27.50", "86.00", "1009.00", "2.00", "247.00", null, null, null, null},
                {"55", "Jul-22", "27.70", "80.00", "1009.90", "4.00", "52.00", null, null, null, null},
                {"56", "Aug-22", "27.50", "84.00", "1009.30", "4.00", "107.00", null, null, null, null},
                {"57", "Sep-22", "27.60", "86.00", "1010.40", "5.00", "180.00", null, null, null, null},
                {"58", "Oct-22", "27.40", "88.00", "1010.10", "5.00", "477.00", null, null, null, null},
                {"59", "Nov-22", "28.10", "88.00", "1009.40", "3.00", "211.00", null, null, null, null},
                {"60", "Dec-22", "27.40", "88.00", "1008.00", "3.00", "266.00", null, null, null, null}
            },
            new String [] {
                "No", "Period", "Temperature", "Humidity", "Air Pressure", "Wind Velocity", "Rainfall", "Rainfall FIS", "APE FIS", "Rainfall GA", "APE GA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        datasetTable.setRowHeight(35);
        datasetTable.setShowGrid(true);
        datasetTable.getTableHeader().setResizingAllowed(false);
        datasetTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(datasetTable);

        homeTitle.setFont(new java.awt.Font("NSimSun", 1, 24)); // NOI18N
        homeTitle.setForeground(new java.awt.Color(27, 38, 44));
        homeTitle.setText("Banyuasin Regency Climate Data (2018 - 2022)");

        datasetPredictButton.setBackground(new java.awt.Color(105, 132, 116));
        datasetPredictButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        datasetPredictButton.setForeground(new java.awt.Color(249, 245, 231));
        datasetPredictButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/business.png"))); // NOI18N
        datasetPredictButton.setText("Predict using FIS & GA");
        datasetPredictButton.setToolTipText("Click the button to start predicting the rainfall using FIS Tsukamoto and combination FIS Tsukamoto & Genetic Algorithm");
        datasetPredictButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        datasetPredictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datasetPredictButtonActionPerformed(evt);
            }
        });

        fisLabel.setText("FIS Tsukamoto Method");

        fisTsukamotoMAPE.setEditable(false);
        fisTsukamotoMAPE.setBackground(new java.awt.Color(255, 255, 255));
        fisTsukamotoMAPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fisTsukamotoMAPEActionPerformed(evt);
            }
        });

        mapeLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mapeLabel.setText("Mean Absolute Percentage Error:");

        fisGALabel.setText("FIS Tsukamoto & GA Method");

        colon1.setText(":");

        colon2.setText(":");

        fisGAMAPE.setEditable(false);
        fisGAMAPE.setBackground(new java.awt.Color(255, 255, 255));
        fisGAMAPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fisGAMAPEActionPerformed(evt);
            }
        });

        popField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popFieldActionPerformed(evt);
            }
        });

        mrField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrFieldActionPerformed(evt);
            }
        });

        geneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneFieldActionPerformed(evt);
            }
        });

        crLabel.setText("Crossover Rate");

        popLabel.setText("Populasi");

        mrLabel.setText("Mutation Rate");

        geneLabel.setText("Generasi");

        crField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crFieldActionPerformed(evt);
            }
        });

        mapeLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mapeLabel1.setText("Start Prediction");

        mapeLabel2.setText("Please fill in GA's parameters below to start prediction!");

        popLabel1.setText("Waktu Ekskusi Program");

        executionTimeFieldFISGA.setEditable(false);
        executionTimeFieldFISGA.setBackground(new java.awt.Color(255, 255, 255));
        executionTimeFieldFISGA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executionTimeFieldFISGAActionPerformed(evt);
            }
        });

        pleaseWaitLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout homeTabLayout = new javax.swing.GroupLayout(homeTab);
        homeTab.setLayout(homeTabLayout);
        homeTabLayout.setHorizontalGroup(
            homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeTabLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeTabLayout.createSequentialGroup()
                        .addComponent(pleaseWaitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                        .addGap(933, 933, 933))
                    .addGroup(homeTabLayout.createSequentialGroup()
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(homeTabLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mapeLabel)
                                    .addGroup(homeTabLayout.createSequentialGroup()
                                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(homeTabLayout.createSequentialGroup()
                                                .addComponent(fisLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(colon2, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(homeTabLayout.createSequentialGroup()
                                                .addComponent(fisGALabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(colon1)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fisGAMAPE, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fisTsukamotoMAPE, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(mapeLabel1)
                                    .addComponent(mapeLabel2)
                                    .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, homeTabLayout.createSequentialGroup()
                                            .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(geneLabel)
                                                .addComponent(popLabel))
                                            .addGap(51, 51, 51)
                                            .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(geneField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                                .addComponent(popField)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, homeTabLayout.createSequentialGroup()
                                            .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(crLabel)
                                                .addComponent(mrLabel))
                                            .addGap(18, 18, 18)
                                            .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(mrField, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                                .addComponent(crField))))))
                            .addGroup(homeTabLayout.createSequentialGroup()
                                .addComponent(popLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(executionTimeFieldFISGA, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(datasetPredictButton, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(homeTabLayout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(homeTitle)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homeTabLayout.setVerticalGroup(
            homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeTabLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(homeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeTabLayout.createSequentialGroup()
                        .addComponent(mapeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fisGALabel)
                            .addComponent(colon1)
                            .addComponent(fisGAMAPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fisLabel)
                            .addComponent(colon2)
                            .addComponent(fisTsukamotoMAPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(mapeLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapeLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popLabel)
                            .addComponent(popField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(geneLabel)
                            .addComponent(geneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(crLabel)
                            .addComponent(crField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mrLabel)
                            .addComponent(mrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(datasetPredictButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(homeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popLabel1)
                            .addComponent(executionTimeFieldFISGA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(194, 194, 194)
                .addComponent(pleaseWaitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainContent.addTab("HOME", homeTab);

        manualForecastingTab.setBackground(new java.awt.Color(222, 237, 240));
        manualForecastingTab.setName(""); // NOI18N
        manualForecastingTab.setPreferredSize(new java.awt.Dimension(1280, 500));

        manualForecastingTitle.setFont(new java.awt.Font("NSimSun", 1, 24)); // NOI18N
        manualForecastingTitle.setForeground(new java.awt.Color(27, 38, 44));
        manualForecastingTitle.setText("Manual Forecasting");

        variableTitle.setFont(new java.awt.Font("NSimSun", 1, 24)); // NOI18N
        variableTitle.setForeground(new java.awt.Color(27, 38, 44));
        variableTitle.setText("Variable Input");

        variableTitleDescription.setText("Please input the variable values to start prediction based on the real data");

        airPressureField.setToolTipText("air pressure value");
        airPressureField.setName(""); // NOI18N
        airPressureField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airPressureFieldActionPerformed(evt);
            }
        });

        humidityField.setToolTipText("humidity value");
        humidityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                humidityFieldActionPerformed(evt);
            }
        });

        windVelocityField.setToolTipText("wind velocity value");
        windVelocityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windVelocityFieldActionPerformed(evt);
            }
        });

        manualTitleDescription.setText("This prediction uses the best membership function values obtained from the research");

        airPressureLabel.setText("Air Pressure");

        temperatureLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        temperatureLabel.setText("Temperature");

        humidityLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        humidityLabel.setText("Humidity");

        windLabel.setText("Wind Velocity");

        temperatureField.setToolTipText("temperature value");
        temperatureField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        temperatureField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureFieldActionPerformed(evt);
            }
        });

        manualPredictButton.setBackground(new java.awt.Color(105, 132, 116));
        manualPredictButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        manualPredictButton.setForeground(new java.awt.Color(229, 228, 204));
        manualPredictButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/business.png"))); // NOI18N
        manualPredictButton.setText("Predict Now");
        manualPredictButton.setToolTipText("Click the button to start rainfall prediction");
        manualPredictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualPredictButtonActionPerformed(evt);
            }
        });

        rainfallPredictionTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rainfallPredictionTitle.setText("Rainfall Prediction");

        colon.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        colon.setText(":");

        rainfallPredictionField.setEditable(false);
        rainfallPredictionField.setBackground(new java.awt.Color(255, 255, 255));
        rainfallPredictionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainfallPredictionFieldActionPerformed(evt);
            }
        });

        rainfallPredictionTitle1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rainfallPredictionTitle1.setText("Execution Time");

        colon3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        colon3.setText(":");

        executionTimeField.setEditable(false);
        executionTimeField.setBackground(new java.awt.Color(255, 255, 255));
        executionTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executionTimeFieldActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Temperature", "0 < x < 50"},
                {"Humidity", "30 < x < 120"},
                {"Air Pressure", "1000 < x < 1030"},
                {"Wind Velocity", "0 < x < 15"}
            },
            new String [] {
                "Variable", "Value Range"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowGrid(true);
        jScrollPane2.setViewportView(jTable1);

        manualTitleDescription1.setText("Range of Input Value:");

        javax.swing.GroupLayout manualForecastingTabLayout = new javax.swing.GroupLayout(manualForecastingTab);
        manualForecastingTab.setLayout(manualForecastingTabLayout);
        manualForecastingTabLayout.setHorizontalGroup(
            manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualForecastingTabLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manualForecastingTabLayout.createSequentialGroup()
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manualTitleDescription1))
                        .addGap(163, 163, 163)
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manualForecastingTabLayout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(variableTitle))
                            .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(manualForecastingTabLayout.createSequentialGroup()
                                    .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(temperatureLabel)
                                        .addComponent(temperatureField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(airPressureLabel)
                                        .addComponent(airPressureField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(50, 50, 50)
                                    .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(windLabel)
                                        .addComponent(humidityLabel)
                                        .addComponent(humidityField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(windVelocityField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(variableTitleDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(manualPredictButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(manualForecastingTabLayout.createSequentialGroup()
                                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rainfallPredictionTitle)
                                    .addComponent(rainfallPredictionTitle1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(colon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(colon3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rainfallPredictionField, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                    .addComponent(executionTimeField)))))
                    .addComponent(manualForecastingTitle)
                    .addComponent(manualTitleDescription))
                .addGap(265, 433, Short.MAX_VALUE))
        );
        manualForecastingTabLayout.setVerticalGroup(
            manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualForecastingTabLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(manualForecastingTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manualTitleDescription)
                .addGap(34, 34, 34)
                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manualForecastingTabLayout.createSequentialGroup()
                        .addComponent(variableTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(variableTitleDescription)
                        .addGap(17, 17, 17)
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temperatureLabel)
                            .addComponent(humidityLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temperatureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(humidityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(airPressureLabel)
                            .addComponent(windLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(airPressureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(windVelocityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manualForecastingTabLayout.createSequentialGroup()
                        .addComponent(manualTitleDescription1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addComponent(manualPredictButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rainfallPredictionTitle)
                    .addComponent(colon)
                    .addComponent(rainfallPredictionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manualForecastingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colon3)
                    .addComponent(executionTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rainfallPredictionTitle1))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        mainContent.addTab("MANUAL FORECASTING", manualForecastingTab);

        footerLabel.setFont(new java.awt.Font("Yu Mincho Demibold", 1, 10)); // NOI18N
        footerLabel.setForeground(new java.awt.Color(254, 252, 243));
        footerLabel.setLabelFor(container);
        footerLabel.setText("Copyright \u00a9 2020-2024 Muhammad Rafi Akbar_09021282025065_TI Reguler 2020 - All Rights Reserved");

        headerLabel.setFont(new java.awt.Font("Courier New", 1, 48)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(254, 252, 243));
        headerLabel.setText("RAINFALL PREDICTION APP");

        bmkgLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Logo BMKG.png"))); // NOI18N

        unsriLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Universitas-Sriwijaya-Logo.png"))); // NOI18N

        taglineLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        taglineLabel.setForeground(new java.awt.Color(215, 192, 174));
        taglineLabel.setText("This application was developed as a requirement to complete the informatics undergraduate program at Sriwijaya University");

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bmkgLogo)
                .addGap(18, 18, 18)
                .addComponent(unsriLogo)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(taglineLabel))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(headerLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(footerLabel)
                .addGap(393, 393, 393))
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bmkgLogo)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                        .addComponent(headerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taglineLabel))
                    .addComponent(unsriLogo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainContent, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(footerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void datasetPredictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datasetPredictButtonActionPerformed
        if (popField.getText().equals("") || geneField.getText().equals("") || crField.getText().equals("") || mrField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please input all the parameter values!", "PREDICTION FAILED", ERROR_MESSAGE);
        } else {
            // Validate input values of double type
            int validate = 0;
            try {
                int populationInput = Integer.parseInt(popField.getText());
                int generationInput = Integer.parseInt(geneField.getText());
                double crossoverInput = Double.parseDouble(crField.getText());
                double mutationInput = Double.parseDouble(mrField.getText());
                validate = 1; // return 1 if parsing succeed
            } catch (NumberFormatException e) {
                validate = -1; // return -1 if parsing failed
            }
           
            
            if (validate == -1) { // Validation is failed
                JOptionPane.showMessageDialog(null, "Input must be filled in with decimal number. Please try again!", "PREDICTION FAILED", ERROR_MESSAGE);
            } else { // Validation is successful
//                int confirmation = JOptionPane.showConfirmDialog(null, "Do you want to proceed using the data?", "CONFIRM DATA", YES_NO_OPTION, QUESTION_MESSAGE);
                int populationInput = Integer.parseInt(popField.getText());
                int generationInput = Integer.parseInt(geneField.getText());
                double crossoverInput = Double.parseDouble(crField.getText());
                double mutationInput = Double.parseDouble(mrField.getText());
                
                fisTsukamotoMAPE.setText("");
                fisGAMAPE.setText("");
                executionTimeFieldFISGA.setText("");
                rainfallPredictionField.setText("");
                executionTimeField.setText("");
                temperatureField.setText("");
                humidityField.setText("");
                airPressureField.setText("");
                windVelocityField.setText("");

                if (populationInput < 2) {
                    JOptionPane.showMessageDialog(null, "The population size must be more than 1. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    popField.setText("");
                    return;
                } else if(generationInput < 1) {
                    JOptionPane.showMessageDialog(null, "The generation size must be at least 1. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    geneField.setText("");
                    return;
                } else if ((crossoverInput < 0.1 || crossoverInput > 1) || (mutationInput < 0.1 || mutationInput > 1)) {
                    JOptionPane.showMessageDialog(null, "The mutation rate or crossover rate should be in the value range 0,1 to 1. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    if ((crossoverInput < 0.1 || crossoverInput > 1)) {
                        crField.setText("");
                    } else {
                        mrField.setText("");
                    }
                    return;
                }

                // Count time - start
                double startTime = System.currentTimeMillis();

                pleaseWaitLabel.setText("Prediction process is ongoing....");

                // Get variable's input values
                int popSize = Integer.parseInt(popField.getText());
                int generationSize = Integer.parseInt(geneField.getText());
                double cr = Double.parseDouble(crField.getText());
                double mr = Double.parseDouble(mrField.getText());

                // Criteria for reading the actual data
                String line = "";
                String delimiter = ",";


                FISTsukamoto predictFIS = new FISTsukamoto(1, 1, 1, 1);

                 // Declare temporary alpha predicate variable
                double[][][] tempFuzzyTemperature1 = new double[predictFIS.getPopSize()][60][3];
                double[][][] tempFuzzyHumidity1 = new double[predictFIS.getPopSize()][60][3];
                double[][][] tempFuzzyAirPressure1 = new double[predictFIS.getPopSize()][60][3];
                double[][][] tempFuzzyWindVelocity1 = new double[predictFIS.getPopSize()][60][3];

                try {
                    String filePath = new File("").getAbsolutePath();

                    // BufferedReader for reading .csv data
                    BufferedReader bufferedReader = new BufferedReader(
                            new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                    );



                    for (int i = 0; i < predictFIS.getPopSize(); i++) {
                        // Index to loop at while statement
                        int index = 0;

                        while((line = bufferedReader.readLine()) != null) {
                            int j = 0;
                            String[] attribute = line.split((delimiter));

                            // Evaluate all variables fire strength
                            predictFIS.temperatureMuValue(Double.parseDouble(attribute[0]));
                            predictFIS.humidityMuValue(Double.parseDouble(attribute[1]));
                            predictFIS.airPressureMuValue(Double.parseDouble(attribute[2]));
                            predictFIS.windVelocityMuValue(Double.parseDouble(attribute[3]));

                            // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                            // and fuzzWindVelocity
                            tempFuzzyTemperature1[i][index][j] = predictFIS.getMuColdTemperature();
                            tempFuzzyHumidity1[i][index][j] = predictFIS.getMuDryHumidity();
                            tempFuzzyAirPressure1[i][index][j] = predictFIS.getMuLowAirPressure();
                            tempFuzzyWindVelocity1[i][index][j] = predictFIS.getMuMediumWindVelocity();
                            j++;

                            tempFuzzyTemperature1[i][index][j] = predictFIS.getMuWarmTemperature();
                            tempFuzzyHumidity1[i][index][j] = predictFIS.getMuWetHumidity();
                            tempFuzzyAirPressure1[i][index][j] = predictFIS.getMuMediumAirPressure();
                            tempFuzzyWindVelocity1[i][index][j] = predictFIS.getMuFastWindVelocity();
                            j++;

                            tempFuzzyTemperature1[i][index][j] = predictFIS.getMuHotTemperature();
                            tempFuzzyHumidity1[i][index][j] = predictFIS.getMuMoistHumidity();
                            tempFuzzyAirPressure1[i][index][j] = predictFIS.getMuHighAirPressure();
                            tempFuzzyWindVelocity1[i][index][j] = predictFIS.getMuVeryFastWindVelocity();
                            index++;
                        }
                    }

                    // Set each variable to fuzzy rule base
                    predictFIS.setFuzzTemperature(tempFuzzyTemperature1);
                    predictFIS.setFuzzHumidity(tempFuzzyHumidity1);
                    predictFIS.setFuzzAirPressure(tempFuzzyAirPressure1);
                    predictFIS.setFuzzWindVelocity(tempFuzzyWindVelocity1);

                    // Do implication for each fuzzy rule base
                    predictFIS.evaluateRule();

                    // Do defuzzification
                    predictFIS.evaluateDefuzzifier();

                    // Find MAPE
                    predictFIS.evaluateMAPE();


                } catch (IOException e) {
                    e.printStackTrace();
                }


                /**
                 * BELOW IS EVALUATION OF GENETIC ALGORITHM
                 */

                /*
                STEP 1: GENERATE AN INITIAL POPULATION
                - Specify the popSize!
                */
                GeneticAlgorithm predict = new FISTsukamoto(popSize, generationSize, cr, mr);
                predict.generateInitialPopulation();

                // Declare temporary alpha predicate variable
                double[][][] tempFuzzyTemperature = new double[predict.getPopSize()][60][3];
                double[][][] tempFuzzyHumidity = new double[predict.getPopSize()][60][3];
                double[][][] tempFuzzyAirPressure = new double[predict.getPopSize()][60][3];
                double[][][] tempFuzzyWindVelocity = new double[predict.getPopSize()][60][3];

                 // Important temporary variable during process genetic algorithm
                double[][] tempChromosomes = new double[predict.getPopSize()][12]; // All chromosomes of popSize
                double[] tempMAPE = new double[predict.getPopSize()]; // All MAPE chromosomes of popSize

                /*
                STEP 2: DO THE FUZZIFICATION OF EACH CHROMOSOME
                */

                // Set upper value of each variable from generated population
                for (int i = 0; i < predict.getPopSize(); i++) {

                    // Assign generated chromosomes into temp chromosomes
                    for (int idx = 0; idx < 12; idx++) {
                        tempChromosomes[i][idx] = predict.getChromosome()[i][idx];
                    }
                    // Temperature variable
                    predict.setTemperatureColdUpperValue(predict.getChromosome()[i][0]);
                    predict.setTemperatureWarmUpperValue(predict.getChromosome()[i][1]);
                    predict.setTemperatureHotUpperValue(predict.getChromosome()[i][2]);

                    // Humidity variable
                    predict.setHumidityDryUpperValue(predict.getChromosome()[i][3]);
                    predict.setHumidityWetUpperValue(predict.getChromosome()[i][4]);
                    predict.setHumidityMoistUpperValue(predict.getChromosome()[i][5]);

                    // Air pressure variable
                    predict.setAirPressureLowUpperValue(predict.getChromosome()[i][6]);
                    predict.setAirPressureMediumUpperValue(predict.getChromosome()[i][7]);
                    predict.setAirPressureHighUpperValue(predict.getChromosome()[i][8]);

                    // Wind velocity variable
                    predict.setWindVelocityMediumUpperValue(predict.getChromosome()[i][9]);
                    predict.setWindVelocityFastUpperValue(predict.getChromosome()[i][10]);
                    predict.setWindVelocityVeryFastUpperValue(predict.getChromosome()[i][11]);

                    try {
                        String filePath = new File("").getAbsolutePath();

                        // BufferedReader for reading .csv data
                        BufferedReader bufferedReader = new BufferedReader(
                                new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                        );

                        // Index to loop at while statement
                        int index = 0;

                        while((line = bufferedReader.readLine()) != null) {
                            int j = 0;
                            String[] attribute = line.split((delimiter));

                            // Evaluate all variables fire strength
                            predict.temperatureMuValue(Double.parseDouble(attribute[0]));
                            predict.humidityMuValue(Double.parseDouble(attribute[1]));
                            predict.airPressureMuValue(Double.parseDouble(attribute[2]));
                            predict.windVelocityMuValue(Double.parseDouble(attribute[3]));

                            // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                            // and fuzzWindVelocity
                            tempFuzzyTemperature[i][index][j] = predict.getMuColdTemperature();
                            tempFuzzyHumidity[i][index][j] = predict.getMuDryHumidity();
                            tempFuzzyAirPressure[i][index][j] = predict.getMuLowAirPressure();
                            tempFuzzyWindVelocity[i][index][j] = predict.getMuMediumWindVelocity();
                            j++;

                            tempFuzzyTemperature[i][index][j] = predict.getMuWarmTemperature();
                            tempFuzzyHumidity[i][index][j] = predict.getMuWetHumidity();
                            tempFuzzyAirPressure[i][index][j] = predict.getMuMediumAirPressure();
                            tempFuzzyWindVelocity[i][index][j] = predict.getMuFastWindVelocity();
                            j++;

                            tempFuzzyTemperature[i][index][j] = predict.getMuHotTemperature();
                            tempFuzzyHumidity[i][index][j] = predict.getMuMoistHumidity();
                            tempFuzzyAirPressure[i][index][j] = predict.getMuHighAirPressure();
                            tempFuzzyWindVelocity[i][index][j] = predict.getMuVeryFastWindVelocity();
                            index++;
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                // Testing 1: show generated population
                System.out.println("Chromosomes zero generation: ");
                for (int k = 0; k < predict.getPopSize(); k++) {
                    for (int j = 0; j < 12; j++) {
                        System.out.print(tempChromosomes[k][j] + "\t");
                    }
                    System.out.println();
                }
                System.out.println();

                // Set each variable to fuzzy rule base
                predict.setFuzzTemperature(tempFuzzyTemperature);
                predict.setFuzzHumidity(tempFuzzyHumidity);
                predict.setFuzzAirPressure(tempFuzzyAirPressure);
                predict.setFuzzWindVelocity(tempFuzzyWindVelocity);

                /*
                STEP 3: DO IMPLICATION FOR EACH FUZZY RULE BASE
                 */
                predict.evaluateRule();

                /*
                STEP 4: DO DEFUZZIFICATION
                 */
                predict.evaluateDefuzzifier();

                /*
                STEP 5: EVALUATE APE & MAPE
                 */
                predict.evaluateMAPE();

                /*
                STEP 6: EVALUATE FITNESS VALUE
                 */
                predict.evaluateFitnessValue();

                if (predict.getPopSize() > 1 && predict.getGenerationSize() > 0) {
                    for (int i = 0; i < predict.getGenerationSize(); i++) {
                        /*
                        STEP 7: DO ROULETTE WHEEL SELECTION TO DETERMINE THE PARENT
                        */
                        predict.doRouletteSelection();

                        /*
                        STEP 8: DO THE CROSSOVER PROCESS
                        */
                        predict.doCrossover();

                        // Create temp offspring from the crossover process
                        double[][] tempOffspringChromosomes = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())][12];

                        for (int k = 0; k < (int) Math.ceil(predict.getCr() * predict.getPopSize()); k++) {
                            for (int l = 0; l < 12; l++) {
                                tempOffspringChromosomes[k][l] = predict.getTempOffspring()[k][l];
                            }
                        }

                         /*
                        STEP 9: DO THE MUTATION PROCESS
                         */
                        predict.doMutation();

                        // Create temp mutant from the mutation process
                        double[][] tempMutantChromosomes = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())][12];

                        for (int k = 0; k < (int) Math.ceil(predict.getMr() * predict.getPopSize()); k++) {
                            for (int l = 0; l < 12; l++) {
                                tempMutantChromosomes[k][l] = predict.getMutant()[k][l];
                            }
                        }

                        /*
                        STEP 10; EVALUATE OFFSPRING'S FITNESS
                         */
                        double[][][] tempFuzzyTemperatureOffspring = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyHumidityOffspring = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyAirPressureOffspring = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyWindVelocityOffspring = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())][60][3];

                        for (int l = 0; l < (int) Math.ceil(predict.getCr() * predict.getPopSize()); l++) {
                            // Temperature variable
                            predict.setTemperatureColdUpperValue(predict.getTempOffspring()[l][0]);
                            predict.setTemperatureWarmUpperValue(predict.getTempOffspring()[l][1]);
                            predict.setTemperatureHotUpperValue(predict.getTempOffspring()[l][2]);

                            // Humidity variable
                            predict.setHumidityDryUpperValue(predict.getTempOffspring()[l][3]);
                            predict.setHumidityWetUpperValue(predict.getTempOffspring()[l][4]);
                            predict.setHumidityMoistUpperValue(predict.getTempOffspring()[l][5]);

                            // Air pressure variable
                            predict.setAirPressureLowUpperValue(predict.getTempOffspring()[l][6]);
                            predict.setAirPressureMediumUpperValue(predict.getTempOffspring()[l][7]);
                            predict.setAirPressureHighUpperValue(predict.getTempOffspring()[l][8]);

                            // Wind velocity variable
                            predict.setWindVelocityMediumUpperValue(predict.getTempOffspring()[l][9]);
                            predict.setWindVelocityFastUpperValue(predict.getTempOffspring()[l][10]);
                            predict.setWindVelocityVeryFastUpperValue(predict.getTempOffspring()[l][11]);

                            try {
                                String filePath = new File("").getAbsolutePath();

                                // BufferedReader for reading .csv data
                                BufferedReader bufferedReader = new BufferedReader(
                                        new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                                );

                                // Index to loop at while statement
                                int index = 0;

                                while((line = bufferedReader.readLine()) != null) {
                                    int j = 0;
                                    String[] attribute = line.split((delimiter));

                                    // Evaluate all variables fire strength
                                    predict.temperatureMuValue(Double.parseDouble(attribute[0]));
                                    predict.humidityMuValue(Double.parseDouble(attribute[1]));
                                    predict.airPressureMuValue(Double.parseDouble(attribute[2]));
                                    predict.windVelocityMuValue(Double.parseDouble(attribute[3]));

                                    // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                                    // and fuzzWindVelocity
                                    tempFuzzyTemperatureOffspring[l][index][j] = predict.getMuColdTemperature();
                                    tempFuzzyHumidityOffspring[l][index][j] = predict.getMuDryHumidity();
                                    tempFuzzyAirPressureOffspring[l][index][j] = predict.getMuLowAirPressure();
                                    tempFuzzyWindVelocityOffspring[l][index][j] = predict.getMuMediumWindVelocity();
                                    j++;

                                    tempFuzzyTemperatureOffspring[l][index][j] = predict.getMuWarmTemperature();
                                    tempFuzzyHumidityOffspring[l][index][j] = predict.getMuWetHumidity();
                                    tempFuzzyAirPressureOffspring[l][index][j] = predict.getMuMediumAirPressure();
                                    tempFuzzyWindVelocityOffspring[l][index][j] = predict.getMuFastWindVelocity();
                                    j++;

                                    tempFuzzyTemperatureOffspring[l][index][j] = predict.getMuHotTemperature();
                                    tempFuzzyHumidityOffspring[l][index][j] = predict.getMuMoistHumidity();
                                    tempFuzzyAirPressureOffspring[l][index][j] = predict.getMuHighAirPressure();
                                    tempFuzzyWindVelocityOffspring[l][index][j] = predict.getMuVeryFastWindVelocity();
                                    index++;
                                }

                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                        // Reset older variables
                        double[][] tempAPEOffspring = new double[predict.getPopSize()][60];
                        double[][] tempTotalZiValueOffspring = new double[predict.getPopSize()][60];
                        double[][] tempTotalMiuMultiplyZiOffspring = new double[predict.getPopSize()][60];
                        double[][] tempTotalFireStrengthOffspring = new double[predict.getPopSize()][60];

                        predict.setAPEOffspring(tempAPEOffspring);
                        predict.setTotalZiValueOffspring(tempTotalZiValueOffspring);
                        predict.setTotalMiuMultiplyZiOffspring(tempTotalMiuMultiplyZiOffspring);
                        predict.setTotalFireStrengthOffspring(tempTotalFireStrengthOffspring);

                        // Set each variable to fuzzy rule base
                        predict.setFuzzTemperatureOffspring(tempFuzzyTemperatureOffspring);
                        predict.setFuzzHumidityOffspring(tempFuzzyHumidityOffspring);
                        predict.setFuzzAirPressureOffspring(tempFuzzyAirPressureOffspring);
                        predict.setFuzzWindVelocityOffspring(tempFuzzyWindVelocityOffspring);

                        // Implication
                        predict.evaluateRuleOffspring();

                        // Defuzzification
                        predict.evaluateDefuzzifierOffspring();

                        // APE & MAPE
                        predict.evaluateMAPEOffspring();

                        /*
                        STEP 11: ELITISM OF CROSSOVER
                         */
                        int[] highestIndexValues = new int[(int) Math.ceil(predict.getCr() * predict.getPopSize())];
                        double[] tempMAPESearchedValues = new double[predict.getPopSize()];
                        double[] tempMAPEOffspring = new double[(int) Math.ceil(predict.getCr() * predict.getPopSize())];

                        // Assign MAPE's old chromosome into temp MAPE
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            tempMAPESearchedValues[m] = predict.getMAPE()[m];
                        }

                        // Assign tempMAPE from older MAPE
                        for (int j = 0; j < predict.getPopSize(); j++) {
                            tempMAPE[j] = predict.getMAPE()[j];
                        }

                        // Assign MAPE's offspring into temp MAPE offspring
                        for (int m = 0; m < (int) Math.ceil(predict.getCr() * predict.getPopSize()); m++) {
                            tempMAPEOffspring[m] = predict.getMAPEOffspring()[m];
                        }

                        for (int m = 0; m < (int) Math.ceil(predict.getCr() * predict.getPopSize()); m++) {
                            double max = -1;
                            int counter = 0;
                            for (int n = 0; n < predict.getPopSize(); n++) {
                                if (tempMAPESearchedValues[n] > max) {
                                    highestIndexValues[m] = n;
                                    max = tempMAPESearchedValues[n];
                                    counter = n;
                                }
                            }
                            // Chromosome replacement
                            for (int p = 0; p < 12; p++) {
                                if (tempMAPE[highestIndexValues[m]] > tempMAPEOffspring[m]) {
                                    tempChromosomes[highestIndexValues[m]][p] = tempOffspringChromosomes[m][p];
                                }
                            }

                            tempMAPESearchedValues[counter] = 0;
                        }

                        System.out.println();
                        System.out.println("Highest index value: ");
                        System.out.println(Arrays.toString(highestIndexValues));
                        System.out.println();

                        System.out.println("MAPE Zero Generation: ");
                        for (int m = 0; m < predict.getPopSize(); m++){
                            System.out.println(tempMAPE[m]);
                        }
                        System.out.println();
                        System.out.println("MAPE Offspring: ");
                        for (int m = 0; m < (int) Math.ceil(predict.getCr() * predict.getPopSize()); m++){
                            System.out.println(tempMAPEOffspring[m]);
                        }

                        System.out.println();
                        System.out.println("Chromosome crossover union result:");
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            for (int n = 0; n < 12; n++) {
                                System.out.print(tempChromosomes[m][n] + "\t");
                            }
                            System.out.println();
                        }

                        // Re-evaluate all chromosome in popSize
                        for (int l = 0; l < predict.getPopSize(); l++) {
                            // Temperature variable
                            predict.setTemperatureColdUpperValue(tempChromosomes[l][0]);
                            predict.setTemperatureWarmUpperValue(tempChromosomes[l][1]);
                            predict.setTemperatureHotUpperValue(tempChromosomes[l][2]);

                            // Humidity variable
                            predict.setHumidityDryUpperValue(tempChromosomes[l][3]);
                            predict.setHumidityWetUpperValue(tempChromosomes[l][4]);
                            predict.setHumidityMoistUpperValue(tempChromosomes[l][5]);

                            // Air pressure variable
                            predict.setAirPressureLowUpperValue(tempChromosomes[l][6]);
                            predict.setAirPressureMediumUpperValue(tempChromosomes[l][7]);
                            predict.setAirPressureHighUpperValue(tempChromosomes[l][8]);

                            // Wind velocity variable
                            predict.setWindVelocityMediumUpperValue(tempChromosomes[l][9]);
                            predict.setWindVelocityFastUpperValue(tempChromosomes[l][10]);
                            predict.setWindVelocityVeryFastUpperValue(tempChromosomes[l][11]);

                            try {
                                String filePath = new File("").getAbsolutePath();

                                // BufferedReader for reading .csv data
                                BufferedReader bufferedReader = new BufferedReader(
                                        new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                                );

                                // Index to loop at while statement
                                int index = 0;

                                while((line = bufferedReader.readLine()) != null) {
                                    int j = 0;
                                    String[] attribute = line.split((delimiter));

                                    // Evaluate all variables fire strength
                                    predict.temperatureMuValue(Double.parseDouble(attribute[0]));
                                    predict.humidityMuValue(Double.parseDouble(attribute[1]));
                                    predict.airPressureMuValue(Double.parseDouble(attribute[2]));
                                    predict.windVelocityMuValue(Double.parseDouble(attribute[3]));

                                    // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                                    // and fuzzWindVelocity
                                    tempFuzzyTemperature[l][index][j] = predict.getMuColdTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuDryHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuLowAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuMediumWindVelocity();
                                    j++;

                                    tempFuzzyTemperature[l][index][j] = predict.getMuWarmTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuWetHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuMediumAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuFastWindVelocity();
                                    j++;

                                    tempFuzzyTemperature[l][index][j] = predict.getMuHotTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuMoistHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuHighAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuVeryFastWindVelocity();
                                    index++;
                                }

                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                        double[][] tempAPEOffspring1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalZiValueOffspring1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalMiuMultiplyZiOffspring1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalFireStrengthOffspring1 = new double[predict.getPopSize()][60];

                        // Reset older variables
                        predict.setAPE(tempAPEOffspring1);
                        predict.setTotalZiValue(tempTotalZiValueOffspring1);
                        predict.setTotalMiuMultiplyZi(tempTotalMiuMultiplyZiOffspring1);
                        predict.setTotalFireStrength(tempTotalFireStrengthOffspring1);

                        // Set each variable to fuzzy rule base
                        predict.setFuzzTemperature(tempFuzzyTemperature);
                        predict.setFuzzHumidity(tempFuzzyHumidity);
                        predict.setFuzzAirPressure(tempFuzzyAirPressure);
                        predict.setFuzzWindVelocity(tempFuzzyWindVelocity);

                        // Implication
                        predict.evaluateRule();

                        // Defuzzification
                        predict.evaluateDefuzzifier();

                        // APE & MAPE
                        predict.evaluateMAPE();

                        System.out.println();
                        System.out.println("MAPE New Chromosomes:");
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            System.out.println(predict.getMAPE()[m]);
                        }

                        /*
                        STEP 12; EVALUATE MUTANT'S FITNESS
                         */
                        double[][][] tempFuzzyTemperatureMutant = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyHumidityMutant = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyAirPressureMutant = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())][60][3];
                        double[][][] tempFuzzyWindVelocityMutant = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())][60][3];

                        for (int l = 0; l < (int) Math.ceil(predict.getMr() * predict.getPopSize()); l++) {
                            // Temperature variable
                            predict.setTemperatureColdUpperValue(predict.getMutant()[l][0]);
                            predict.setTemperatureWarmUpperValue(predict.getMutant()[l][1]);
                            predict.setTemperatureHotUpperValue(predict.getMutant()[l][2]);

                            // Humidity variable
                            predict.setHumidityDryUpperValue(predict.getMutant()[l][3]);
                            predict.setHumidityWetUpperValue(predict.getMutant()[l][4]);
                            predict.setHumidityMoistUpperValue(predict.getMutant()[l][5]);

                            // Air pressure variable
                            predict.setAirPressureLowUpperValue(predict.getMutant()[l][6]);
                            predict.setAirPressureMediumUpperValue(predict.getMutant()[l][7]);
                            predict.setAirPressureHighUpperValue(predict.getMutant()[l][8]);

                            // Wind velocity variable
                            predict.setWindVelocityMediumUpperValue(predict.getMutant()[l][9]);
                            predict.setWindVelocityFastUpperValue(predict.getMutant()[l][10]);
                            predict.setWindVelocityVeryFastUpperValue(predict.getMutant()[l][11]);

                            try {
                                String filePath = new File("").getAbsolutePath();

                                // BufferedReader for reading .csv data
                                BufferedReader bufferedReader = new BufferedReader(
                                        new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                                );

                                // Index to loop at while statement
                                int index = 0;

                                while((line = bufferedReader.readLine()) != null) {
                                    int j = 0;
                                    String[] attribute = line.split((delimiter));

                                    // Evaluate all variables fire strength
                                    predict.temperatureMuValue(Double.parseDouble(attribute[0]));
                                    predict.humidityMuValue(Double.parseDouble(attribute[1]));
                                    predict.airPressureMuValue(Double.parseDouble(attribute[2]));
                                    predict.windVelocityMuValue(Double.parseDouble(attribute[3]));

                                    // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                                    // and fuzzWindVelocity
                                    tempFuzzyTemperatureMutant[l][index][j] = predict.getMuColdTemperature();
                                    tempFuzzyHumidityMutant[l][index][j] = predict.getMuDryHumidity();
                                    tempFuzzyAirPressureMutant[l][index][j] = predict.getMuLowAirPressure();
                                    tempFuzzyWindVelocityMutant[l][index][j] = predict.getMuMediumWindVelocity();
                                    j++;

                                    tempFuzzyTemperatureMutant[l][index][j] = predict.getMuWarmTemperature();
                                    tempFuzzyHumidityMutant[l][index][j] = predict.getMuWetHumidity();
                                    tempFuzzyAirPressureMutant[l][index][j] = predict.getMuMediumAirPressure();
                                    tempFuzzyWindVelocityMutant[l][index][j] = predict.getMuFastWindVelocity();
                                    j++;

                                    tempFuzzyTemperatureMutant[l][index][j] = predict.getMuHotTemperature();
                                    tempFuzzyHumidityMutant[l][index][j] = predict.getMuMoistHumidity();
                                    tempFuzzyAirPressureMutant[l][index][j] = predict.getMuHighAirPressure();
                                    tempFuzzyWindVelocityMutant[l][index][j] = predict.getMuVeryFastWindVelocity();
                                    index++;
                                }

                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                        double[][] tempAPEMutant = new double[predict.getPopSize()][60];
                        double[][] tempTotalZiValueMutant = new double[predict.getPopSize()][60];
                        double[][] tempTotalMiuMultiplyZiMutant = new double[predict.getPopSize()][60];
                        double[][] tempTotalFireStrengthMutant = new double[predict.getPopSize()][60];

                        predict.setAPEMutant(tempAPEMutant);
                        predict.setTotalZiValueMutant(tempTotalZiValueMutant);
                        predict.setTotalMiuMultiplyZiMutant(tempTotalMiuMultiplyZiMutant);
                        predict.setTotalFireStrengthMutant(tempTotalFireStrengthMutant);

                        // Set each variable to fuzzy rule base
                        predict.setFuzzTemperatureMutant(tempFuzzyTemperatureMutant);
                        predict.setFuzzHumidityMutant(tempFuzzyHumidityMutant);
                        predict.setFuzzAirPressureMutant(tempFuzzyAirPressureMutant);
                        predict.setFuzzWindVelocityMutant(tempFuzzyWindVelocityMutant);

                        // Implication
                        predict.evaluateRuleMutant();

                        // Defuzzification
                        predict.evaluateDefuzzifierMutant();

                        // APE & MAPE
                        predict.evaluateMAPEMutant();

                        //testing
                        System.out.println();
                        System.out.println("Mutant's MAPE:");
                        for (int m = 0; m < (int) Math.ceil(predict.getMr() * predict.getPopSize()); m++) {
                            System.out.println(predict.getMAPEMutant()[m]);
                        }

                         /*
                        STEP 13: ELITISM OF MUTATION
                         */
                        int[] highestIndexValuesMutation = new int[(int) Math.ceil(predict.getMr() * predict.getPopSize())];
                        double[] tempMAPESearchedValuesMutation = new double[predict.getPopSize()];
                        double[] tempMAPEMutant = new double[(int) Math.ceil(predict.getMr() * predict.getPopSize())];

                        // Assign MAPE's old chromosome into temp MAPE
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            tempMAPESearchedValuesMutation[m] = predict.getMAPE()[m];
                        }

                        // Assign tempMAPE from older MAPE
                        for (int j = 0; j < predict.getPopSize(); j++) {
                            tempMAPE[j] = predict.getMAPE()[j];
                        }

                        // Assign MAPE's mutant into temp MAPE offspring
                        for (int m = 0; m < (int) Math.ceil(predict.getMr() * predict.getPopSize()); m++) {
                            tempMAPEMutant[m] = predict.getMAPEMutant()[m];
                        }

                        for (int m = 0; m < (int) Math.ceil(predict.getMr() * predict.getPopSize()); m++) {
                            double max = -1;
                            int counter = 0;
                            for (int n = 0; n < predict.getPopSize(); n++) {
                                if (tempMAPESearchedValuesMutation[n] > max) {
                                    highestIndexValuesMutation[m] = n;
                                    max = tempMAPESearchedValuesMutation[n];
                                    counter = n;
                                }
                            }
                            // Chromosome replacement
                            for (int p = 0; p < 12; p++) {
                                if (tempMAPE[highestIndexValuesMutation[m]] > tempMAPEMutant[m]) {
                                    tempChromosomes[highestIndexValuesMutation[m]][p] = tempMutantChromosomes[m][p];
                                }
                            }

                            tempMAPESearchedValuesMutation[counter] = 0;
                        }

                        System.out.println();
                        System.out.println("Highest index value mutant: ");
                        System.out.println(Arrays.toString(highestIndexValuesMutation));
                        System.out.println();

                        System.out.println("MAPE Zero Generation with crossover union: ");
                        for (int m = 0; m < predict.getPopSize(); m++){
                            System.out.println(tempMAPE[m]);
                        }
                        System.out.println();
                        System.out.println("MAPE Mutant: ");
                        for (int m = 0; m < (int) Math.ceil(predict.getMr() * predict.getPopSize()); m++){
                            System.out.println(tempMAPEMutant[m]);
                        }

                        System.out.println();
                        System.out.println("Chromosome crossover & mutant union result:");
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            for (int n = 0; n < 12; n++) {
                                System.out.print(tempChromosomes[m][n] + "\t");
                            }
                            System.out.println();
                        }

                        // Re-evaluate all chromosome in popSize
                        for (int l = 0; l < predict.getPopSize(); l++) {
                            // Temperature variable
                            predict.setTemperatureColdUpperValue(tempChromosomes[l][0]);
                            predict.setTemperatureWarmUpperValue(tempChromosomes[l][1]);
                            predict.setTemperatureHotUpperValue(tempChromosomes[l][2]);

                            // Humidity variable
                            predict.setHumidityDryUpperValue(tempChromosomes[l][3]);
                            predict.setHumidityWetUpperValue(tempChromosomes[l][4]);
                            predict.setHumidityMoistUpperValue(tempChromosomes[l][5]);

                            // Air pressure variable
                            predict.setAirPressureLowUpperValue(tempChromosomes[l][6]);
                            predict.setAirPressureMediumUpperValue(tempChromosomes[l][7]);
                            predict.setAirPressureHighUpperValue(tempChromosomes[l][8]);

                            // Wind velocity variable
                            predict.setWindVelocityMediumUpperValue(tempChromosomes[l][9]);
                            predict.setWindVelocityFastUpperValue(tempChromosomes[l][10]);
                            predict.setWindVelocityVeryFastUpperValue(tempChromosomes[l][11]);

                            try {
                                String filePath = new File("").getAbsolutePath();

                                // BufferedReader for reading .csv data
                                BufferedReader bufferedReader = new BufferedReader(
                                        new FileReader(filePath + "\\src\\dataSet\\Data.csv")
                                );

                                // Index to loop at while statement
                                int index = 0;

                                while((line = bufferedReader.readLine()) != null) {
                                    int j = 0;
                                    String[] attribute = line.split((delimiter));

                                    // Evaluate all variables fire strength
                                    predict.temperatureMuValue(Double.parseDouble(attribute[0]));
                                    predict.humidityMuValue(Double.parseDouble(attribute[1]));
                                    predict.airPressureMuValue(Double.parseDouble(attribute[2]));
                                    predict.windVelocityMuValue(Double.parseDouble(attribute[3]));

                                    // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure,
                                    // and fuzzWindVelocity
                                    tempFuzzyTemperature[l][index][j] = predict.getMuColdTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuDryHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuLowAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuMediumWindVelocity();
                                    j++;

                                    tempFuzzyTemperature[l][index][j] = predict.getMuWarmTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuWetHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuMediumAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuFastWindVelocity();
                                    j++;

                                    tempFuzzyTemperature[l][index][j] = predict.getMuHotTemperature();
                                    tempFuzzyHumidity[l][index][j] = predict.getMuMoistHumidity();
                                    tempFuzzyAirPressure[l][index][j] = predict.getMuHighAirPressure();
                                    tempFuzzyWindVelocity[l][index][j] = predict.getMuVeryFastWindVelocity();
                                    index++;
                                }

                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }

                        double[][] tempAPEMutant1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalZiValueMutant1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalMiuMultiplyZiMutant1 = new double[predict.getPopSize()][60];
                        double[][] tempTotalFireStrengthMutant1 = new double[predict.getPopSize()][60];

                        // Reset older variables
                        predict.setAPE(tempAPEMutant1);
                        predict.setTotalZiValue(tempTotalZiValueMutant1);
                        predict.setTotalMiuMultiplyZi(tempTotalMiuMultiplyZiMutant1);
                        predict.setTotalFireStrength(tempTotalFireStrengthMutant1);

                        // Set each variable to fuzzy rule base
                        predict.setFuzzTemperature(tempFuzzyTemperature);
                        predict.setFuzzHumidity(tempFuzzyHumidity);
                        predict.setFuzzAirPressure(tempFuzzyAirPressure);
                        predict.setFuzzWindVelocity(tempFuzzyWindVelocity);

                        // Implication
                        predict.evaluateRule();

                        // Defuzzification
                        predict.evaluateDefuzzifier();

                        // APE & MAPE
                        predict.evaluateMAPE();

                        System.out.println();
                        System.out.println("MAPE New Chromosomes ALl Union:");
                        for (int m = 0; m < predict.getPopSize(); m++) {
                            System.out.println(predict.getMAPE()[m]);
                        }

                        predict.setChromosome(tempChromosomes);
                        predict.evaluateFitnessValue();

                    }
                }
                double minMAPE = predict.getMAPE()[0];
                int counter = 0;

                for (int i = 0; i < predict.getPopSize(); i++) {
                    if (predict.getMAPE()[i] < minMAPE) {
                        minMAPE = predict.getMAPE()[i];
                        counter = i;
                    }
                }

                System.out.println();
                System.out.println("Nilai MAPE terbaik:");
                System.out.println(minMAPE);
                System.out.println();
                System.out.println("Fungsi keanggotaan:");
                for (int i = 0; i < 12; i++) {
                    System.out.print(tempChromosomes[counter][i] + "\t");
                }
                System.out.println();
                System.out.println();

                // Count time - stop
                double stopTime = System.currentTimeMillis();
                // assign the difference between the initial and final values
                double elapsedTime = (stopTime - startTime)/1000;
                System.out.println("Execution time: " + elapsedTime + " seconds");

                // String array for storing data into table
                DefaultTableModel tblModel = (DefaultTableModel)datasetTable.getModel();

                JOptionPane.showMessageDialog(null, "Click OK to see the results!", "PREDICTION SUCCEEDED", INFORMATION_MESSAGE);


                for (int i = 0; i < 60; i++) {
                    tblModel.setValueAt(predict.getAPE()[counter][i], i, 10);
                }

                for (int i = 0; i < 60; i++) {
                    tblModel.setValueAt(predict.getTotalZiValue()[counter][i], i, 9);
                }

                for (int i = 0; i < 60; i++) {
                    tblModel.setValueAt(predictFIS.getAPE()[0][i], i, 8);
                }

                for (int i = 0; i < 60; i++) {
                    tblModel.setValueAt(predictFIS.getTotalZiValue()[0][i], i, 7);
                }

                pleaseWaitLabel.setText("Prediction succeeded!");
                executionTimeFieldFISGA.setText(String.valueOf(elapsedTime) + " second(s)");
                fisTsukamotoMAPE.setText(String.valueOf(predictFIS.getMAPE()[0]) + " %");
                fisGAMAPE.setText(String.valueOf(predict.getMAPE()[counter]) + " %");
                
            }
        }
    }//GEN-LAST:event_datasetPredictButtonActionPerformed

    private void fisTsukamotoMAPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fisTsukamotoMAPEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fisTsukamotoMAPEActionPerformed

    private void fisGAMAPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fisGAMAPEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fisGAMAPEActionPerformed

    private void airPressureFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airPressureFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airPressureFieldActionPerformed

    private void humidityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_humidityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_humidityFieldActionPerformed

    private void windVelocityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windVelocityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_windVelocityFieldActionPerformed

    private void temperatureFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temperatureFieldActionPerformed

    private void rainfallPredictionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainfallPredictionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rainfallPredictionFieldActionPerformed

    private void mrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mrFieldActionPerformed

    private void popFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popFieldActionPerformed

    private void crFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crFieldActionPerformed

    private void geneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_geneFieldActionPerformed

    private void executionTimeFieldFISGAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executionTimeFieldFISGAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_executionTimeFieldFISGAActionPerformed

    private void executionTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executionTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_executionTimeFieldActionPerformed

    private void manualPredictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualPredictButtonActionPerformed
        // Validate input values must not be null
        if (temperatureField.getText().equals("") || humidityField.getText().equals("") || airPressureField.getText().equals("") || windVelocityField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Fill in all the fields. Please try again!", "PREDICTION FAILED", ERROR_MESSAGE);
        } else {
            // Validate input values of double type
            int validate = 0;
            try {
                double temperatureInput = Double.parseDouble(temperatureField.getText());
                double humidityInput = Double.parseDouble(humidityField.getText());
                double airPressureInput = Double.parseDouble(airPressureField.getText());
                double windVelocityInput = Double.parseDouble(windVelocityField.getText());
                validate = 1; // return 1 if parsing succeed
            } catch (NumberFormatException e) {
                validate = -1; // return -1 if parsing failed
            }
            
            if (validate == -1) { // Validation is failed
                JOptionPane.showMessageDialog(null, "Input must be filled in with decimal number. Please try again!", "PREDICTION FAILED", ERROR_MESSAGE);
            } else { // Validation is successful
//                int confirmation = JOptionPane.showConfirmDialog(null, "Do you want to proceed using the data?", "CONFIRM DATA", YES_NO_OPTION, QUESTION_MESSAGE);
                double temperatureInput = Double.parseDouble(temperatureField.getText());
                double humidityInput = Double.parseDouble(humidityField.getText());
                double airPressureInput = Double.parseDouble(airPressureField.getText());
                double windVelocityInput = Double.parseDouble(windVelocityField.getText());

                 if (temperatureInput <= 0 || temperatureInput >= 50) {
                    JOptionPane.showMessageDialog(null, "The temperature value should be more than 0 and less than 50. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    temperatureField.setText("");
                    return;
                } else if(humidityInput <= 30 || humidityInput >= 120) {
                    JOptionPane.showMessageDialog(null, "The humidity value should be more than 30 and less than 120. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    humidityField.setText("");
                    return;
                } else if (airPressureInput <= 1000 || airPressureInput >= 1030) {
                    JOptionPane.showMessageDialog(null, "The air pressure value should be more than 1000 and less than 1030. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    airPressureField.setText("");
                    return;
                } else if (windVelocityInput <= 0 || windVelocityInput >= 15) {
                    JOptionPane.showMessageDialog(null, "The wind velocity value should be more than 0 and less than 15. Try again!", "PREDICTION FAILED", ERROR_MESSAGE);
                    windVelocityField.setText("");
                    return;
                }
                
                
//                    JOptionPane.showMessageDialog(null, "Prediction process canceled", "CANCEL PREDICTION", WARNING_MESSAGE);
                    rainfallPredictionField.setText("");
                    executionTimeField.setText("");
                    crField.setText("");
                    mrField.setText("");
                    popField.setText("");
                    geneField.setText("");
                    fisGAMAPE.setText("");
                    fisTsukamotoMAPE.setText("");
                    executionTimeFieldFISGA.setText("");
                
                    // Count time - start
                    double startTime = System.currentTimeMillis();
                    
                  

                    // Create FIS Tsukamoto object
                    FISTsukamoto predict = new FISTsukamoto(1, 1, 1, 1);

                    // Declare temporary aplha predicate's variables
                    double[][][] tempFuzzyTemperature = new double[predict.getPopSize()][1][3];
                    double[][][] tempFuzzyHumidity = new double[predict.getPopSize()][1][3];
                    double[][][] tempFuzzyAirPressure = new double[predict.getPopSize()][1][3];
                    double[][][] tempFuzzyWindVelocity = new double[predict.getPopSize()][1][3];

                    // Set temperature variable
                    predict.setTemperatureColdUpperValue(20.94);
                    predict.setTemperatureWarmUpperValue(28.79);
                    predict.setTemperatureHotUpperValue(29.48);

                    // Set humidity variable
                    predict.setHumidityDryUpperValue(51.95);
                    predict.setHumidityWetUpperValue(58.81);
                    predict.setHumidityMoistUpperValue(79.91);

                    // Set air pressure variable
                    predict.setAirPressureLowUpperValue(1002.53);
                    predict.setAirPressureMediumUpperValue(1006.36);
                    predict.setAirPressureHighUpperValue(1009.77);

                    // Set wind velocity variable
                    predict.setWindVelocityMediumUpperValue(3.46);
                    predict.setWindVelocityFastUpperValue(-0.92);
                    predict.setWindVelocityVeryFastUpperValue(2.36);

                    // Do the fuzzification
                    for (int i = 0; i < predict.getPopSize(); i++) {
                        // Looping index while at statement
                        int index = 0;
                        int j = 0;

                        // Evaluate all variables fire strength
                        predict.temperatureMuValue(temperatureInput);
                        predict.humidityMuValue(humidityInput);
                        predict.airPressureMuValue(airPressureInput);
                        predict.windVelocityMuValue(windVelocityInput);

                        // Assign muValue each variable into fuzzTemperature, fuzzHumidity, fuzzAirPressure, and fuzzWindVelocity
                        tempFuzzyTemperature[i][index][j] = predict.getMuColdTemperature();
                        tempFuzzyHumidity[i][index][j] = predict.getMuDryHumidity();
                        tempFuzzyAirPressure[i][index][j] = predict.getMuLowAirPressure();
                        tempFuzzyWindVelocity[i][index][j] = predict.getMuMediumWindVelocity();
                        j++;

                        tempFuzzyTemperature[i][index][j] = predict.getMuWarmTemperature();
                        tempFuzzyHumidity[i][index][j] = predict.getMuWetHumidity();
                        tempFuzzyAirPressure[i][index][j] = predict.getMuMediumAirPressure();
                        tempFuzzyWindVelocity[i][index][j] = predict.getMuFastWindVelocity();
                        j++;

                        tempFuzzyTemperature[i][index][j] = predict.getMuHotTemperature();
                        tempFuzzyHumidity[i][index][j] = predict.getMuMoistHumidity();
                        tempFuzzyAirPressure[i][index][j] = predict.getMuHighAirPressure();
                        tempFuzzyWindVelocity[i][index][j] = predict.getMuVeryFastWindVelocity();
                    }

                    // Set each variable to fuzzy rule base
                    predict.setFuzzTemperature(tempFuzzyTemperature);
                    predict.setFuzzHumidity(tempFuzzyHumidity);
                    predict.setFuzzAirPressure(tempFuzzyAirPressure);
                    predict.setFuzzWindVelocity(tempFuzzyWindVelocity);

                    // Do implication for each fuzzy rule base
                    predict.evaluateRuleTsukamoto();

                    // Do defuzzification
                    predict.evaluateDefuzzifierTsukamoto();

                    // Get rainfall prediction and execution time value    
                    // assign the difference between the initial and final values
                    double elapsedTime = (System.currentTimeMillis() - startTime)/1000;

                    // Set the values into GUI
                    rainfallPredictionField.setText(String.valueOf(predict.getTotalZiValue()[0][0]) + " mm");
                    executionTimeField.setText(String.valueOf(elapsedTime) + " second(s)");
                    JOptionPane.showMessageDialog(null, "Prediction succeeded!", "SUCCESS", INFORMATION_MESSAGE);

                
            }
        }
    }//GEN-LAST:event_manualPredictButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField airPressureField;
    private javax.swing.JLabel airPressureLabel;
    private javax.swing.JLabel bmkgLogo;
    private javax.swing.JLabel colon;
    private javax.swing.JLabel colon1;
    private javax.swing.JLabel colon2;
    private javax.swing.JLabel colon3;
    private javax.swing.JPanel container;
    private javax.swing.JTextField crField;
    private javax.swing.JLabel crLabel;
    private javax.swing.JButton datasetPredictButton;
    private javax.swing.JTable datasetTable;
    private javax.swing.JTextField executionTimeField;
    private javax.swing.JTextField executionTimeFieldFISGA;
    private javax.swing.JLabel fisGALabel;
    private javax.swing.JTextField fisGAMAPE;
    private javax.swing.JLabel fisLabel;
    private javax.swing.JTextField fisTsukamotoMAPE;
    private javax.swing.JLabel footerLabel;
    private javax.swing.JTextField geneField;
    private javax.swing.JLabel geneLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel homeTab;
    private javax.swing.JLabel homeTitle;
    private javax.swing.JTextField humidityField;
    private javax.swing.JLabel humidityLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTabbedPane mainContent;
    private javax.swing.JPanel manualForecastingTab;
    private javax.swing.JLabel manualForecastingTitle;
    private javax.swing.JButton manualPredictButton;
    private javax.swing.JLabel manualTitleDescription;
    private javax.swing.JLabel manualTitleDescription1;
    private javax.swing.JLabel mapeLabel;
    private javax.swing.JLabel mapeLabel1;
    private javax.swing.JLabel mapeLabel2;
    private javax.swing.JTextField mrField;
    private javax.swing.JLabel mrLabel;
    private javax.swing.JLabel pleaseWaitLabel;
    private javax.swing.JTextField popField;
    private javax.swing.JLabel popLabel;
    private javax.swing.JLabel popLabel1;
    private javax.swing.JTextField rainfallPredictionField;
    private javax.swing.JLabel rainfallPredictionTitle;
    private javax.swing.JLabel rainfallPredictionTitle1;
    private javax.swing.JLabel taglineLabel;
    private javax.swing.JTextField temperatureField;
    private javax.swing.JLabel temperatureLabel;
    private javax.swing.JLabel unsriLogo;
    private javax.swing.JLabel variableTitle;
    private javax.swing.JLabel variableTitleDescription;
    private javax.swing.JLabel windLabel;
    private javax.swing.JTextField windVelocityField;
    // End of variables declaration//GEN-END:variables
}
